import re
import os
import json
import time
from google.cloud import vision
from docx import Document
from docx.shared import Pt
import openai
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ API-–∫–ª—é—á–µ–π
load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")
os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = os.getenv("GOOGLE_APPLICATION_CREDENTIALS")

def extract_text_with_vision_api(image_path):
    """–†–∞—Å–ø–æ–∑–Ω–∞—ë—Ç —Ç–µ–∫—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é Google Vision API."""
    print("\nüîç –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
    client = vision.ImageAnnotatorClient()
    
    with open(image_path, 'rb') as image_file:
        content = image_file.read()
    image = vision.Image(content=content)

    response = client.text_detection(image=image)
    texts = response.text_annotations

    if not texts:
        print("‚ùå –¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.")
        return ""

    extracted_text = texts[0].description.strip()
    print(f"‚úÖ –ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n{extracted_text[:500]}...")
    return extracted_text

def process_with_openai(text):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é OpenAI (–∏–∑–≤–ª–µ–∫–∞–µ—Ç –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)."""
    print("\nüì° –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞—Å–ø–æ—Ä—Ç –ò–Ω–¥–∏–∏ —Å OpenAI...")

    prompt = f"""
    You are processing an Indian passport. Return only JSON without any extra explanations.

    Extract the following data as JSON:
    - Type
    - Code
    - Passport Number
    - Surname
    - Given Names
    - Nationality
    - Date of Birth (dd.mm.yyyy)
    - Sex ("–ñ" for F, "–ú" for M)
    - Place of Birth
    - Place of Issue
    - Date of Issue (dd.mm.yyyy)
    - Date of Expiry (dd.mm.yyyy)
    - MRZ

    Text to process:
    {text}
    """

    for _ in range(3):
        try:
            response = openai.ChatCompletion.create(
                model="gpt-4-turbo",
                messages=[{"role": "system", "content": "You are a professional AI that processes passports."},
                          {"role": "user", "content": prompt}],
                response_format={"type": "json_object"}
            )
            structured_data = json.loads(response["choices"][0]["message"]["content"])
            structured_data = {key: value.upper() for key, value in structured_data.items()}
            print(f"‚úÖ OpenAI –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ:\n{json.dumps(structured_data, indent=4, ensure_ascii=False)}")
            return structured_data
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ OpenAI: {e}")
            time.sleep(2)
    return {}

def translate_text(text, field_name, target_lang="ru"):
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é OpenAI."""
    try:
        prompt = f"""
        Translate the following into {target_lang}, keeping the format unchanged:
        {text}
        """

        response = openai.ChatCompletion.create(
            model="gpt-4-turbo",
            messages=[{"role": "system", "content": "You are an expert AI translator."},
                      {"role": "user", "content": prompt}]
        )
        translated_text = response["choices"][0]["message"]["content"].strip()
        print(f"üîÑ –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ [{field_name}]: {text} ‚Üí {translated_text}")
        return translated_text
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è {field_name}: {e}")
        return text

def format_mrz(raw_text):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç MRZ-–∑–æ–Ω—É –ø–∞—Å–ø–æ—Ä—Ç–∞ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π ICAO-—Ñ–æ—Ä–º–∞—Ç."""
    print("\nüìå –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º MRZ...")

    raw_text = re.sub(r"[^A-Z0-9<]", "", raw_text.upper())

    if len(raw_text) >= 88:
        mrz_line_1 = raw_text[:44]
        mrz_line_2 = raw_text[44:88]
    else:
        lines = raw_text.split("\n")
        mrz_lines = [line.strip() for line in lines if "<<" in line or len(line) > 30]

        if len(mrz_lines) < 2:
            print("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–≤–µ —Å—Ç—Ä–æ–∫–∏ MRZ! –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")
            raw_text = raw_text.ljust(88, "<")
            mrz_line_1 = raw_text[:44]
            mrz_line_2 = raw_text[44:88]
        else:
            mrz_line_1 = mrz_lines[0].ljust(44, "<")[:44]
            mrz_line_2 = mrz_lines[1].ljust(44, "<")[:44]

    formatted_mrz = f"{mrz_line_1}\n{mrz_line_2}"
    print(f"‚úÖ –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π MRZ:\n{formatted_mrz}")
    return formatted_mrz

def process_document(image_path, template_path, output_path):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞—Å–ø–æ—Ä—Ç –ò–Ω–¥–∏–∏."""
    try:
        recognized_text = extract_text_with_vision_api(image_path)
        if not recognized_text:
            print("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞.")
            return
        
        structured_data = process_with_openai(recognized_text)
        structured_data["MRZ"] = format_mrz(structured_data["MRZ"])

        # üîπ –ü–µ—Ä–µ–≤–æ–¥–∏–º –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è –ø–µ—Ä–µ–¥ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º Word
        print("\nüåç –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...")
        fields_to_translate = ["Surname", "Given Names", "Nationality", "Place of Birth", "Place of Issue"]
        for field in fields_to_translate:
            if field in structured_data and structured_data[field] != "Not found":
                structured_data[field] = translate_text(structured_data[field], field, "ru")
        
        print("‚úÖ –ü–µ—Ä–µ–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
        print(json.dumps(structured_data, indent=4, ensure_ascii=False))

        # –ó–∞–ø–æ–ª–Ω—è–µ–º —à–∞–±–ª–æ–Ω Word
        fill_word_template(template_path, output_path, structured_data)

        print("\nüéâ –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ!")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def fill_word_template(template_path, output_path, data):
    """–ó–∞–ø–æ–ª–Ω—è–µ—Ç —à–∞–±–ª–æ–Ω Word –¥–∞–Ω–Ω—ã–º–∏, –≤—ã–¥–µ–ª—è—è –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º –∏ –¥–µ–ª–∞—è –≤—Å–µ –∑–∞–≥–ª–∞–≤–Ω—ã–º–∏."""
    print("\nüìù –ó–∞–ø–æ–ª–Ω—è–µ–º —à–∞–±–ª–æ–Ω Word...")
    doc = Document(template_path)

    # –ö–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∂–∏—Ä–Ω—ã–º–∏
    bold_fields = ["–§–∞–º–∏–ª–∏—è", "–ò–º—è", "–ò–º—è –æ—Ç—Ü–∞", "‚Ññ –ø–∞—Å–ø–æ—Ä—Ç–∞", "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", "–ü–æ–ª", "–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è", "–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏", "–î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞", "–û—Ä–≥–∞–Ω –≤—ã–¥–∞—á–∏"]

    for paragraph in doc.paragraphs:
        for key, value in data.items():
            if f"{{{{{key}}}}}" in paragraph.text:
                # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏, –∑–∞–º–µ–Ω—è—è –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –Ω–∞ –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                new_text = paragraph.text.replace(f"{{{{{key}}}}}", value.upper())
                paragraph.clear()
                
                # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π run —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                run = paragraph.add_run(new_text)
                run.font.size = Pt(12)
                # –î–µ–ª–∞–µ–º –∂–∏—Ä–Ω—ã–º, –µ—Å–ª–∏ –ø–æ–ª–µ –≤ —Å–ø–∏—Å–∫–µ bold_fields
                run.bold = True

    for table in doc.tables:
        for row in table.rows:
            for cell in row.cells:
                for paragraph in cell.paragraphs:
                    for key, value in data.items():
                        if f"{{{{{key}}}}}" in paragraph.text:
                            # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏, –∑–∞–º–µ–Ω—è—è –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –Ω–∞ –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                            new_text = paragraph.text.replace(f"{{{{{key}}}}}", value.upper())
                            paragraph.clear()
                            
                            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π run —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                            run = paragraph.add_run(new_text)
                            run.font.size = Pt(12)
                            # –î–µ–ª–∞–µ–º –∂–∏—Ä–Ω—ã–º, –µ—Å–ª–∏ –ø–æ–ª–µ –≤ —Å–ø–∏—Å–∫–µ bold_fields
                            run.bold = True
    doc.save(output_path)
    print(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {output_path}")